# yandex_gpt/client.py
import json
import aiohttp
from config.env import conf
from config.logging_config import logger, async_log_exception

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_client = None

class YandexGPTClient:
    def __init__(self):
        self.api_key = conf.yandex.gpt_api_key
        self.api_url = conf.yandex.gpt_api_url
        self.folder_id = conf.yandex.folder_id
        self.gpt_model = conf.yandex.gpt_model
        self.model_uri = f"gpt://{self.folder_id}/{self.gpt_model}"

    def get_model(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –º–æ–¥–µ–ª—å YandexGPT
        
        Returns:
            str: –ò–º—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "yandexgpt/latest")
        """
        return self.gpt_model

    async def _make_request(self, prompt_data: dict):
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YandexGPT"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        self.api_url,
                        headers=headers,
                        json=prompt_data,
                        timeout=30
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"YandexGPT API error: {response.status} - {error_text}")
                        return None
                    return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}", exc_info=True)
            return None


@async_log_exception
async def generate_travel_themes(model: str = "yandexgpt/latest", count: int = 4) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö

    Args:
        model (str): –ú–æ–¥–µ–ª—å YandexGPT
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Returns:
        dict: {'themes': ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2", ...]}
    """
    client = YandexGPTClient()
    system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

    –ó–ê–î–ê–ß–ê:
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –≤ —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ.

    –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    1. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏.
    2. –§–æ—Ä–º–∞—Ç —Ç–µ–º—ã: "—ç–º–æ–¥–∑–∏ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —á—É–¥–µ—Å–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞").
    3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –ø–æ –†–æ—Å—Å–∏–∏.
    4. –¢–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (–ø—Ä–∏—Ä–æ–¥–∞, –∫—É–ª—å—Ç—É—Ä–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è).
    5. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
    6. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
    5. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
    6. –ù–ï –î–û–ë–ê–í–õ–Ø–ô –ü–û–Ø–°–ù–ï–ù–ò–ô, –¢–û–õ–¨–ö–û JSON.
    7. –°–¢–†–û–ì–û –°–õ–ï–î–£–ô –°–¢–†–£–ö–¢–£–†–ï: {{ "themes": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2", ...] }}.

    –ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê:
    {{
        "themes": [
            "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —á—É–¥–µ—Å–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞",
            "üåÑ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏",
            "üèñÔ∏è –ü–ª—è–∂–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞ –ú–∞–ª—å–¥–∏–≤",
            "üè∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ò—Ç–∞–ª–∏–∏",
            "üå¥ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¢–∞–∏–ª–∞–Ω–¥–∞"
        ]
    }}
    """
    request_data = {
        "modelUri": client.model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 2000
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"}
        ]
    }
    response = await client._make_request(request_data)
    if not response or "result" not in response:
        logger.warning("822.98 –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–µ–º—ã
        return {
            "themes": [
                "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —á—É–¥–µ—Å–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞",
                "üè∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ò—Ç–∞–ª–∏–∏",
                "üåå –ù–æ—á–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥ –∑–≤—ë–∑–¥–Ω—ã–º –Ω–µ–±–æ–º –°–∞—Ö–∞—Ä—ã",
                "üçú –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —É–ª–∏—á–Ω—ã–º —Ä—ã–Ω–∫–∞–º –ë–∞–Ω–≥–∫–æ–∫–∞"
            ]
        }
    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    try:
        content = response["result"]["alternatives"][0]["message"]["text"]
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±—É–µ–º —Å–ø–∞—Ä—Å–∏—Ç—å JSON
        clean_content = content.strip().replace("```json", "").replace("```", "")
        parsed = json.loads(clean_content)
        if not isinstance(parsed, dict) or "themes" not in parsed:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'themes'")
        themes = parsed["themes"]
        if not isinstance(themes, list) or len(themes) != count:
            raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –Ω–µ —Ä–∞–≤–Ω–æ {count}")
        logger.info(f"822.80 [YandexGPT] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–º—ã: {themes}")
        return {"themes": themes}
    except (json.JSONDecodeError, KeyError, ValueError) as e:
        logger.error(f"822.99 [YandexGPT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–µ–º—ã
        return {
            "themes": [
                "üåø –≠–∫–æ—Ç—É—Ä–∏–∑–º –Ω–∞ –ê–ª—Ç–∞–µ",
                "üåÑ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏",
                "üèñÔ∏è –ü–ª—è–∂–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞ –ú–∞–ª—å–¥–∏–≤",
                "üèîÔ∏è –ì–æ—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ê–ª—å–ø–∞—Ö",
                "üå¥ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¢–∞–∏–ª–∞–Ω–¥–∞",
                "üåø –≠–∫–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Å–∫—Ä—ã—Ç—ã–º —É–≥–æ–ª–∫–∞–º –ê–º–∞–∑–æ–Ω–∫–∏",
                "üèîÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∫–∏–Ω–≥–∏ –≤ –≥–æ—Ä–∞—Ö –ü–∞—Ç–∞–≥–æ–Ω–∏–∏",
                "üé® –ê—Ä—Ç-—Ç—É—Ä—ã –ø–æ —Å–∫—Ä—ã—Ç—ã–º –≥–∞–ª–µ—Ä–µ—è–º –ü–∞—Ä–∏–∂–∞"
            ]
        }


@async_log_exception
async def generate_text(prompt: str, model: str = "yandexgpt/latest", max_tokens: int = 500, style: str = "casual") -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è

    Args:
        prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        model (str): –ú–æ–¥–µ–ª—å YandexGPT
        max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        style (str): –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ (casual, professional, humorous, poetic)

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    client = YandexGPTClient()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
    style_instructions = {
        "casual": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ —Å –¥—Ä—É–≥–æ–º.",
        "professional": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        "humorous": "–î–æ–±–∞–≤—å—Ç–µ —é–º–æ—Ä –∏ —à—É—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –≤–µ—Å–µ–ª—ã–º –∏ –∑–∞–±–∞–≤–Ω—ã–º.",
        "poetic": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –∏ –æ–±—Ä–∞–∑–∞–º–∏."
    }
    # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
    selected_style = style_instructions.get(style.lower(), style_instructions["casual"])
    system_prompt = f"""–í—ã SMM-—ç–∫—Å–ø–µ—Ä—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç—ã –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. 
    –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 900 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.

    {selected_style}
    –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ."""
    request_data = {
        "modelUri": client.model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": 0.5,
            "maxTokens": max_tokens
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": prompt}
        ]
    }
    response = await client._make_request(request_data)
    if not response or "result" not in response:
        logger.error("[YandexGPT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
    try:
        content = response["result"]["alternatives"][0]["message"]["text"]
        return content.strip()
    except Exception as e:
        logger.error(f"[YandexGPT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {e}")


@async_log_exception
async def generate_image_prompt(post_text: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    Args:
        post_text (str): –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞

    Returns:
        str: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    client = YandexGPTClient()
    system_prompt = """–í—ã SMM-—ç–∫—Å–ø–µ—Ä—Ç –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä. 
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (20-25 —Å–ª–æ–≤), –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫ —Ç–µ–∫—Å—Ç—É. 
    –í–∫–ª—é—á–∏—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:
    - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ/–ª–∞–Ω–¥—à–∞—Ñ—Ç
    - –õ—é–¥–∏/–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏. –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    request_data = {
        "modelUri": client.model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 300
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text}"}
        ]
    }
    response = await client._make_request(request_data)
    if not response or "result" not in response:
        logger.error("[YandexGPT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
    try:
        content = response["result"]["alternatives"][0]["message"]["text"]
        image_prompt = content.strip()
        logger.info(f"[YandexGPT] –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_prompt}")
        return image_prompt
    except Exception as e:
        logger.error(f"[YandexGPT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {e}")


@async_log_exception
async def get_current_model() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å YandexGPT –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    global _client
    if _client is None:
        _client = YandexGPTClient()
    return _client.get_model()
