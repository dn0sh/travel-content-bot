# bot/dialogs/auto_schedule.py
import math
import re
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Button, Row, Calendar, Column, Multiselect, Next, Back, Select, SwitchTo
from aiogram_dialog.widgets.text import Const, Format, List as DList
from dataclasses import dataclass
from datetime import datetime, timedelta, time as dt_time
from typing import Any, Dict

from bot.dialogs import states
from bot.themes import get_global_themes, set_global_themes
from config.config import generate_travel_themes, generate_text, generate_image_prompt, get_current_model
from config.env import bot_global, conf, datetime_local
from config.logging_config import logger, async_log_exception
from database.models import GenerationType, Post, AsyncSessionLocal
from yandex_art.client import generate_image
from scheduler.jobs import schedule_post_job
from .common import MAIN_MENU_MAIN_BUTTON


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤
PERIOD_OPTIONS = {
    "2 –¥–Ω—è": ("2 –¥–Ω—è", 2),
    "–Ω–µ–¥–µ–ª—è": ("–ù–µ–¥–µ–ª—è", 7),
    "10 –¥–Ω–µ–π": ("10 –¥–Ω–µ–π", 10),
    "–º–µ—Å—è—Ü": ("–ú–µ—Å—è—Ü", 30)
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
MAX_THEMES = 35
MAX_DAILY_POSTS = 1
DEFAULT_DAILY_POSTS = 1
DEFAULT_TIME = "09:30"
TRAVEL_THEMES_KEY = 'key_themes'
TRAVEL_THEMES_ID = 'themes_select'
MAX_UPDATE_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@dataclass
class TravelThemesGroup:
    id: int
    name: str


@async_log_exception
async def start_auto_schedule(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    dialog_manager.dialog_data.update({
        'period': None,
        'daily_posts': DEFAULT_DAILY_POSTS,
        'publish_time': DEFAULT_TIME,
        'start_date': None,
        'themes': [],
        'custom_themes': [],
        'total_posts': 0,
        'scheduled_posts': []
    })
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–º—ã
    if not dialog_manager.dialog_data.get('themes'):
        themes = get_global_themes().get('themes', [])
        dialog_manager.dialog_data['themes'] = themes[:MAX_THEMES]
    await dialog_manager.start(state=states.AutoScheduleStates.PERIOD_SELECT, mode=StartMode.RESET_STACK)


@async_log_exception
async def auto_schedule_getter(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–æ–Ω"""
    data = dialog_manager.dialog_data
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
    period = data.get('period')
    if period is None:
        # dialog_manager.dialog_data['period'] = '1 –¥–µ–Ω—å'
        period_days = 1
        period_days_text = 1
    else:
        period_days = int(PERIOD_OPTIONS[period][1]) if period else 1  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
        period_days_text = period
    dialog_manager.dialog_data['period_days'] = period_days
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
    daily_posts = int(data.get('daily_posts', DEFAULT_DAILY_POSTS))  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
    dialog_manager.dialog_data['daily_posts'] = daily_posts
    total_posts = daily_posts * period_days
    dialog_manager.dialog_data['total_posts'] = total_posts
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    themes = data.get('themes', [])
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    global_themes = get_global_themes()
    travel_themes = {}
    if isinstance(global_themes, dict):
        travel_themes = global_themes.get('themes', [])
    custom_themes = data.get('custom_themes', [])
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if not isinstance(themes, list):
        themes = []
    if not isinstance(travel_themes, list):
        travel_themes = []
    if not isinstance(custom_themes, list):
        custom_themes = []
        dialog_manager.dialog_data['custom_themes'] = custom_themes
    # all_themes = travel_themes + themes + custom_themes # TODO
    all_themes = travel_themes + custom_themes # TODO
    dialog_manager.dialog_data['all_themes'] = all_themes
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    schedule_preview = []
    publish_time = data.get('publish_time', '09:30')
    dialog_manager.dialog_data['publish_time'] = publish_time
    travel_themes_objects = [
        TravelThemesGroup(id=index, name=theme)
        for index, theme in enumerate(all_themes)
    ]
    selected_theme_indices = dialog_manager.dialog_data.get('selected_theme_indices', [])
    selected_theme_names = dialog_manager.dialog_data.get('selected_theme_names', [])
    if publish_time:
        start_date = data.get('start_date') or (datetime_local().date() + timedelta(days=1))
        if data.get('start_date') is None:
            dialog_manager.dialog_data['start_date'] = start_date
        try:
            hour, minute = map(int, publish_time.split(":"))
            base_time = dt_time(hour=hour, minute=minute)
            for day in range(period_days):
                current_date = start_date + timedelta(days=day)
                for post_num in range(daily_posts):
                    scheduled_datetime = datetime.combine(current_date, base_time) + timedelta(minutes=post_num)
                    theme_index = (day * daily_posts + post_num) % len(selected_theme_names) if selected_theme_names else 0
                    theme = selected_theme_names[theme_index] if selected_theme_names else "..."
                    schedule_preview.append({
                        'date': scheduled_datetime.strftime("%Y-%m-%d"),
                        'time': scheduled_datetime.strftime("%H:%M"),
                        'theme': theme
                    })
        except Exception as e:
            logger.error(f"302.99 –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    return {
        'period': period_days_text,
        'daily_posts': daily_posts,
        'publish_time': data.get('publish_time', DEFAULT_TIME),
        'start_date': data.get('start_date'),
        'themes': themes,
        'custom_themes': custom_themes,
        'total_posts': total_posts,
        'schedule_preview': schedule_preview,
        'themes_count': len(all_themes),
        'max_themes': MAX_THEMES,
        'max_daily_posts': MAX_DAILY_POSTS,
        'selected_themes_count': len(selected_theme_indices),
        'selected_themes_count_ok': '‚úÖ' if not len(selected_theme_indices) < total_posts else '',
        'selected_themes_visible': True if len(selected_theme_indices) !=0 else False,
        TRAVEL_THEMES_KEY: travel_themes_objects
    }


@async_log_exception
async def on_period_selected(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, selected_period: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    dialog_manager.dialog_data['period'] = selected_period
    await dialog_manager.next()


@async_log_exception
async def on_daily_posts_selected(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, selected_posts: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å"""
    dialog_manager.dialog_data['daily_posts'] = selected_posts
    await dialog_manager.next()


@async_log_exception
async def on_time_selected(message: Message, widget: Any, dialog_manager: DialogManager, time_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        time_str = time_str.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        match = re.match(r"^(\d{1,2})[\:\;\–∂\.\s,\-_]+(\d{1,2})$", time_str)
        if not match:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
        hour, minute = map(int, match.groups())
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError("–ß–∞—Å—ã –∏–ª–∏ –º–∏–Ω—É—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        formatted_time = f"{hour:02d}:{minute:02d}"
        dialog_manager.dialog_data['publish_time'] = formatted_time
        await dialog_manager.next()
    except ValueError as e:
        error_msg = str(e)
        if "groups" in error_msg:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–∏–º–µ—Ä—ã: 14:30, 14 30, 14.30, 14,30, 14;30, 14-30, 14_30"
        elif "–¥–∏–∞–ø–∞–∑–æ–Ω–∞" in error_msg:
            error_msg = "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59"
        else:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–∏–º–µ—Ä—ã: 14:30, 14 30, 14.30, 14,30, 14;30, 14-30, 14_30"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {error_msg}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_msg}\n"
                             f"üïí <b>–§–æ—Ä–º–∞—Ç—ã:</b> HH:MM / HH MM / HH.MM / HH,MM / HH;MM / HH-MM / HH_MM")

@async_log_exception
async def on_start_date_selected(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, selected_date: datetime.date):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    dialog_manager.dialog_data['start_date'] = selected_date
    await dialog_manager.next()

	
@async_log_exception
async def on_theme_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager, selected_button):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–º—ã –∏–∑ –∫–Ω–æ–ø–∫–∏
        theme_index = int(selected_button.replace("theme_", ""))  # –ù–∞–ø—Ä–∏–º–µ—Ä, "theme_0" ‚Üí 0
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        all_themes = dialog_manager.dialog_data.get('all_themes', [])
        if not all_themes:
            await callback.message.answer("‚ùå –¢–µ–º—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
        selected_theme_indices = dialog_manager.dialog_data.get('selected_theme_indices', [])
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º —Ç–µ–º—É
        if theme_index in selected_theme_indices:
            selected_theme_indices.remove(theme_index)
        else:
            if len(selected_theme_indices) >= MAX_THEMES:
                await callback.message.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_THEMES} —Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å")
                return
            selected_theme_indices.append(theme_index)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        dialog_manager.dialog_data['selected_theme_indices'] = selected_theme_indices
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
        selected_theme_names = [all_themes[i] for i in selected_theme_indices if i < len(all_themes)]
        dialog_manager.dialog_data['selected_theme_names'] = selected_theme_names
    except (ValueError, IndexError) as e:
        error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã: {str(e)}"
        logger.error(error_msg)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã: {error_msg}")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã: {str(e)}")


@async_log_exception
async def on_add_custom_theme(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
    await dialog_manager.next()


@async_log_exception
async def on_save_custom_theme(message: Message, widget: Any, dialog_manager: DialogManager, theme_text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
    custom_themes = dialog_manager.dialog_data.get('custom_themes', [])
    if len(custom_themes) >= MAX_THEMES:
        await message.answer(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º: {MAX_THEMES}")
        return
    theme_text = theme_text.strip()
    if theme_text:
        custom_themes.append(theme_text)
        dialog_manager.dialog_data['custom_themes'] = custom_themes
        await message.answer(f"‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {theme_text}")
    await dialog_manager.back()


@async_log_exception
async def on_remove_custom_theme(callback: CallbackQuery, button: Button, dialog_manager: DialogManager, index: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
    custom_themes = dialog_manager.dialog_data.get('custom_themes', [])
    if 0 <= index < len(custom_themes):
        removed_theme = custom_themes.pop(index)
        dialog_manager.dialog_data['custom_themes'] = custom_themes
        await callback.message.answer(f"üóëÔ∏è –¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞: {removed_theme}")


@async_log_exception
async def on_generate_themes(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–µ–º
        total_posts = dialog_manager.dialog_data.get('total_posts', 10)
        if total_posts <= 0:
            await callback.message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º —Å –∑–∞–ø–∞—Å–æ–º (–Ω–∞ 47% –±–æ–ª—å—à–µ), –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 5
        new_theme_count = max(math.ceil(total_posts * 1.47), 5)
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_themes = []
        remaining_posts = new_theme_count  # –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –∑–∞–ø–∞—Å–æ–º
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 15
        while remaining_posts > 0:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            current_count = min(remaining_posts, 15)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—ã
            new_themes = await generate_travel_themes(count=current_count)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–º—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            if new_themes and "themes" in new_themes:
                all_themes.extend(new_themes["themes"])
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤
            remaining_posts -= current_count
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
        set_global_themes({"themes": all_themes})
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
        dialog_manager.dialog_data['themes'] = all_themes
        dialog_manager.dialog_data['selected_theme_indices'] = []
        dialog_manager.dialog_data['selected_theme_names'] = []
        logger.info(f"üîÑ –¢–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(all_themes)} —à—Ç.")
        # await callback.message.answer(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_themes)} —Ç–µ–º (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: {new_theme_count})")
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await callback.message.answer(error_msg)


@async_log_exception
async def on_preview_schedule(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    await dialog_manager.next()


@async_log_exception
async def on_confirm_schedule(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    data = dialog_manager.dialog_data
    required_fields = ['daily_posts', 'start_date', 'publish_time', 'selected_theme_names']
    if not all(data.get(field) for field in required_fields):
        await callback.message.answer("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        return
    status_msg = await callback.message.answer("<b>‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...</b>")
    status_message_id = status_msg.message_id
    dialog_manager.dialog_data['status_message_id'] = status_message_id
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º message_id –≤ —Ñ—É–Ω–∫—Ü–∏—é
        await generate_and_schedule_posts(
            data=data,
            status_message_id=status_message_id,
            chat_id=callback.message.chat.id
        )
        await callback.message.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=status_message_id,
            text="<b>‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!</b>"
        )
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–æ–π
        await callback.message.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=status_message_id,
            text=f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}</b>"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await dialog_manager.done()


@async_log_exception
async def generate_and_schedule_posts(data: Dict[str, Any], status_message_id: int, chat_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    selected_theme_names = data['selected_theme_names']
    model_text = await get_current_model()
    daily_posts = data['daily_posts']
    publish_time = data['publish_time']
    start_date = data.get('start_date') or datetime_local().date()
    period_days = data['period_days']
    hour, minute = map(int, publish_time.split(":"))
    base_time = dt_time(hour=hour, minute=minute)
    total_posts = period_days * daily_posts
    posts_scheduled = 0
    last_update_time = datetime.now()
    for day in range(period_days):
        current_date = start_date + timedelta(days=day)
        for post_num in range(daily_posts):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            scheduled_datetime = datetime.combine(current_date, base_time) + timedelta(minutes=post_num)  # –°–º–µ—â–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω—É—Ç—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É
            theme = selected_theme_names[(day * daily_posts + post_num) % len(selected_theme_names)]
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                post_text = await generate_text(theme)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_prompt = await generate_image_prompt(post_text)
                image_path = await generate_image(image_prompt)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î
                async with AsyncSessionLocal() as session:
                    post = Post(
                        text=post_text,
                        text_prompt=theme,
                        model_text=model_text,
                        image_path=image_path,
                        image_prompt=image_prompt,
                        model_image=conf.yandex.art_model,
                        scheduled_at=scheduled_datetime,
                        is_scheduled=True,
                        status_text=GenerationType.SUCCESS,
                        status_image=GenerationType.SUCCESS
                    )
                    session.add(post)
                    await session.commit()
                    await session.refresh(post)
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                    await schedule_post_job(scheduled_datetime, post.id)
                posts_scheduled += 1
                now = datetime.now()
                if (now - last_update_time).total_seconds() > MAX_UPDATE_INTERVAL:
                    await bot_global.edit_message_text(chat_id=chat_id, message_id=status_message_id, text=f"‚è≥ –ü–æ—Å—Ç {posts_scheduled} –∏–∑ {total_posts} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω...")
                    last_update_time = now
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç {post.id} –Ω–∞ {scheduled_datetime}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ–º—ã {theme}: {e}")
                continue


# --- –û–∫–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ --- #

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
select_period_window = Window(
    Const("<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>"),
    Select(
        text=Format("{item[0]}"),
        id="period_select",
        item_id_getter=lambda x: x[1],
        items=[
            ("–ù–∞ 2 –¥–Ω—è", "2 –¥–Ω—è"),
            ("–ù–∞ –Ω–µ–¥–µ–ª—é", "–Ω–µ–¥–µ–ª—è"),
            ("–ù–∞ 10 –¥–Ω–µ–π", "10 –¥–Ω–µ–π"),
            ("–ù–∞ –º–µ—Å—è—Ü", "–º–µ—Å—è—Ü")
        ],
        on_click=on_period_selected
    ),
    Row(
        MAIN_MENU_MAIN_BUTTON,
        Next(Const('–î–∞–ª–µ–µ ‚û°Ô∏è')),
    ),
    state=states.AutoScheduleStates.PERIOD_SELECT
)

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
select_daily_posts_window = Window(
    Const("<b>üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b>"),
    Select(
        text=Format("{item}"),
        id="daily_posts_select",
        item_id_getter=lambda x: x,
        items=list(range(1, MAX_DAILY_POSTS + 1)),
        on_click=on_daily_posts_selected
    ),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Next(Const('–î–∞–ª–µ–µ ‚û°Ô∏è'))
    ),
    state=states.AutoScheduleStates.DAILY_POSTS_SELECT
)

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
select_time_window = Window(
    Const("<b>‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)</b>"),
    TextInput(id="time_input", on_success=on_time_selected),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Next(Const('–î–∞–ª–µ–µ ‚û°Ô∏è'))
    ),
    state=states.AutoScheduleStates.TIME_SELECT
)

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
select_start_date_window = Window(
    Const("<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>"),
    Calendar(id="start_date_calendar", on_click=on_start_date_selected),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Next(Const('–î–∞–ª–µ–µ ‚û°Ô∏è'))
    ),
    state=states.AutoScheduleStates.SELECT_START_DATE
)

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º
select_themes_window = Window(
    Const("<b>üß© –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>:"),
    Format("–í—Å–µ–≥–æ —Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {themes_count}"),
    Format("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: {total_posts}"),
    Format("–í—ã–±—Ä–∞–Ω–æ: {selected_themes_count} {selected_themes_count_ok}"),
    Column(
        Multiselect(
            checked_text=Format('‚úÖ {item.name}'),
            unchecked_text=Format('{item.name}'),
            id=TRAVEL_THEMES_ID,
            items=TRAVEL_THEMES_KEY,
            item_id_getter=lambda item: item.id,
            on_click=on_theme_selected
        )
    ),
    Row(
        Button(Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É"), id="btn_add_custom_theme", on_click=on_add_custom_theme),
        Button(Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—ã"), id="btn_regenerate_themes", on_click=on_generate_themes)
    ),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        SwitchTo(text=Const('‚û°Ô∏è –î–∞–ª–µ–µ'), id='btn_edit_date', state=states.AutoScheduleStates.SCHEDULE_PREVIEW, when='selected_themes_visible'),
    ),
    state=states.AutoScheduleStates.THEMES_SELECT,
    getter=auto_schedule_getter,
    parse_mode = 'HTML'
)

# –û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
add_custom_theme_window = Window(
    Const("<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É:</b>"),
    TextInput(id="custom_theme_input", on_success=on_save_custom_theme),
    Row(
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        Next(Const('–î–∞–ª–µ–µ ‚û°Ô∏è'))
    ),
    state=states.AutoScheduleStates.CUSTOM_THEME
)

# –û–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
preview_schedule_window = Window(
    Const('<b>üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>'),
    Format("–ü–µ—Ä–∏–æ–¥: <b>{period}</b>\n"
           "–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: <b>{daily_posts}</b>\n"
           "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{publish_time}</b>\n"
           # "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: <b>{themes_count}</b>\n"
           "–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: <b>{total_posts}</b>"),
    Const("\n<b>üìÖ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>"),
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    DList(
        field=Format("{item[date]} {item[time]}\n{item[theme]}\n"),  # –§–æ—Ä–º–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
        items="schedule_preview",  # –ö–ª—é—á –≤ getter-–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        sep="\n",  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    ),
    Row(
        SwitchTo(text=Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), id='btn_edit_date', state=states.AutoScheduleStates.THEMES_SELECT),
        Button(Const("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"), id="btn_confirm", on_click=on_confirm_schedule)
    ),
    state=states.AutoScheduleStates.SCHEDULE_PREVIEW,
    getter=auto_schedule_getter,
    parse_mode='HTML'
)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ --- #
auto_schedule_dialog = Dialog(
    select_period_window,
    select_time_window,
    select_start_date_window,
    select_themes_window,
    add_custom_theme_window,
    preview_schedule_window
)
