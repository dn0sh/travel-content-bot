# scheduler/jobs.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from sqlalchemy.future import select
from telegram_api.client import publish_post_to_group
from telegram_api.stats import fetch_post_stats
from config.env import bot_global, conf
from config.logging_config import logger, async_log_exception
from database.models import AsyncSessionLocal, Post

scheduler = AsyncIOScheduler()


@async_log_exception
async def schedule_post_job(scheduled_time: datetime, post_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    async def job():
        try:
            async with AsyncSessionLocal() as session:
                result = await session.execute(select(Post).where(Post.id == post_id))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'id' –ø–æ—Å—Ç–∞
                post = result.scalars().first()
                if not post:
                    logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
                channel_id = conf.tg_bot.channel_id
                message_id = await publish_post_to_group(channel_id, post.text, post.image_path)
                logger.info(f"–ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
                post.published = True
                post.published_at = datetime.now()
                post.message_id = message_id
                await session.commit()
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                if channel_id.startswith("-100"):
                    clean_chat_id = channel_id[4:]  # –£–±–∏—Ä–∞–µ–º "-100"
                elif channel_id.startswith("-"):
                    clean_chat_id = channel_id[1:]  # –£–±–∏—Ä–∞–µ–º "-"
                else:
                    clean_chat_id = channel_id
                post_url = f"https://t.me/c/{clean_chat_id}/{message_id}"
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in conf.tg_bot.admin_ids:
                    try:
                        await bot_global.send_message(chat_id=admin_id, text=f"<b>‚è∞ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! ‚úÖ</b>\nüîó {post_url}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        except Exception as ee:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {ee}")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for admin_id in conf.tg_bot.admin_ids:
                try:
                    await bot_global.send_message(chat_id=admin_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\nüìù –û—à–∏–±–∫–∞: {ee}")
                except Exception as e:
                    logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(job, 'date', run_date=scheduled_time)


@async_log_exception
async def setup_stats_job():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    try:
        async def update_stats():
            async with AsyncSessionLocal() as session:
                await fetch_post_stats(session, conf.tg_bot.channel_u)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
        scheduler.add_job(
            update_stats,
            'interval',
            hours=24,
            id='update_post_stats',
            replace_existing=True
        )
        logger.info("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
