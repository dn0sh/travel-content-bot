# main.py
from aiogram import Dispatcher, F, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, Message
from aiogram_dialog import DialogManager, setup_dialogs, StartMode
from datetime import datetime, timedelta
from config.config import generate_travel_themes
from config.env import bot_global, conf
from config.logging_config import logging, setup_logging, logger, async_log_exception
from database.models import init_db
from bot.dialogs import states
from bot.dialogs.generate_post import main_dialog
from bot.dialogs.auto_schedule import auto_schedule_dialog
from bot.dialogs.scheduled_posts import scheduled_posts_dialog
from bot.dialogs.post_stats import post_stats_dialog
from bot.themes import set_global_themes
from scheduler.jobs import scheduler, setup_stats_job

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(level=logging.DEBUG)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
COMMANDS = {
    "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"
}

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è callback-–∑–∞–ø—Ä–æ—Å–∞–º–∏
router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏ aiogram_dialog –≤ —Ä–æ—É—Ç–µ—Ä
router.include_routers(
    main_dialog,
    auto_schedule_dialog,
    scheduled_posts_dialog,
    post_stats_dialog,
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ===
logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π")

@async_log_exception
async def on_start(message: Message, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    username = message.from_user.username or message.from_user.full_name
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await dialog_manager.start(state=states.PostStates.MAIN, mode=StartMode.RESET_STACK)


@async_log_exception
async def set_main_menu():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –±–æ—Ç–∞ –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥"""
    try:
        main_menu_commands = [
            BotCommand(command=command, description=description)
            for command, description in COMMANDS.items()
        ]
        await bot_global.set_my_commands(main_menu_commands)
        logger.debug("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")


@async_log_exception
async def setup_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    dp.message.register(on_start, F.text == '/start')
    logger.debug("üß† –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


@async_log_exception
async def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        scheduler.add_job(generate_travel_themes_job, 'date', run_date=datetime.now() + timedelta(seconds=5))
        await setup_stats_job()  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        scheduler.start()
        logger.debug(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: {scheduler.get_jobs()}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


@async_log_exception
async def generate_travel_themes_job():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    logger.debug("‚è∞ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º")
    initial_themes = await generate_travel_themes(count=4)
    set_global_themes(initial_themes)
    logger.debug(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(initial_themes)} —Ç–µ–º –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")


@async_log_exception
async def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    if scheduler.running:
        scheduler.shutdown()
        logger.debug("üí§ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@async_log_exception
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        logger.debug("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        conf.dp = dp  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.include_router(router)
        setup_dialogs(dp)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        dp.startup.register(set_main_menu)
        await setup_handlers(dp)
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await start_scheduler()
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üü¢ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(bot_global, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await stop_scheduler()
        logger.info("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
