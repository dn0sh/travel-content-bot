# openai_api/client.py
import json
from openai import OpenAI, APIError, AuthenticationError, RateLimitError, OpenAIError
from config.env import conf
from config.logging_config import logger, async_log_exception

client = OpenAI(api_key=conf.openai.api_key)


@async_log_exception
async def generate_travel_themes(model: str = conf.openai.gpt_model, count: int = 4) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö

    Args:
        model (str): –ú–æ–¥–µ–ª—å OpenAI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4)

    Returns:
        dict: {'themes': ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2", ...]}
    """
    try:
        completion = client.chat.completions.create(
            model=model,
            messages=[{"role": "system", "content": f"""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —ç–º–æ–¥–∑–∏
- –§–æ—Ä–º–∞—Ç —Ç–µ–º—ã: "—ç–º–æ–¥–∑–∏ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —á—É–¥–µ—Å–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞")
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –ø–æ –†–æ—Å—Å–∏–∏
- –¢–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (–ø—Ä–∏—Ä–æ–¥–∞, –∫—É–ª—å—Ç—É—Ä–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è)
- –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤

–í–∞–∂–Ω–æ:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ
- –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û "themes"
- –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä—É—Å—Å–∫–∏–π)
- –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Ç–µ–º—ã

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
{{
    "themes": [
        "—ç–º–æ–¥–∑–∏ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã 1",
        "—ç–º–æ–¥–∑–∏ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã 2",
        ...
    ]

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
{{
    "themes": [
        "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —á—É–¥–µ—Å–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"
        "üåÑ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏",
        "üèñÔ∏è –ü–ª—è–∂–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞ –ú–∞–ª—å–¥–∏–≤",
        "üè∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ò—Ç–∞–ª–∏–∏",
        "üå¥ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¢–∞–∏–ª–∞–Ω–¥–∞"
    ]
}}
"""},
                {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"}
                      ],
            temperature=0.7,
            max_tokens=2000,
            response_format={"type": "json_object"}
        )
        # –ü–∞—Ä—Å–∏–º JSON –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        response = completion.choices[0].message.content.strip()
        parsed = json.loads(response)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not isinstance(parsed, dict) or "themes" not in parsed:
            logger.warning("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ 'themes'")
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'themes'")
        themes = parsed["themes"]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–º
        if not isinstance(themes, list) or len(themes) != count:
            logger.warning(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –Ω–µ —Ä–∞–≤–Ω–æ {count}")
            raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –Ω–µ —Ä–∞–≤–Ω–æ {count}")
        logger.info(f"[OpenAI] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã: {themes}")
        return {"themes": themes}
    except (json.JSONDecodeError, KeyError, ValueError) as e:
        logger.error(f"[OpenAI] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–µ–º—ã
        return {
            "themes": [
                "üåø –≠–∫–æ—Ç—É—Ä–∏–∑–º –Ω–∞ –ê–ª—Ç–∞–µ",
                "üåÑ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏",
                "üèñÔ∏è –ü–ª—è–∂–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞ –ú–∞–ª—å–¥–∏–≤",
                "üèîÔ∏è –ì–æ—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ê–ª—å–ø–∞—Ö",
                "üå¥ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¢–∞–∏–ª–∞–Ω–¥–∞",
                "üåø –≠–∫–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Å–∫—Ä—ã—Ç—ã–º —É–≥–æ–ª–∫–∞–º –ê–º–∞–∑–æ–Ω–∫–∏",
                "üèîÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∫–∏–Ω–≥–∏ –≤ –≥–æ—Ä–∞—Ö –ü–∞—Ç–∞–≥–æ–Ω–∏–∏",
                "üé® –ê—Ä—Ç-—Ç—É—Ä—ã –ø–æ —Å–∫—Ä—ã—Ç—ã–º –≥–∞–ª–µ—Ä–µ—è–º –ü–∞—Ä–∏–∂–∞"
            ]
        }


@async_log_exception
async def generate_text(prompt: str, model: str = conf.openai.gpt_model, max_tokens: int = 500, style: str = "casual") -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è

    Args:
        prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        model (str): –ú–æ–¥–µ–ª—å OpenAI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        style (str): –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ (casual, professional, humorous, poetic)
    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
        style_instructions = {
            "casual": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ —Å –¥—Ä—É–≥–æ–º.",
            "professional": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
            "humorous": "–î–æ–±–∞–≤—å—Ç–µ —é–º–æ—Ä –∏ —à—É—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –≤–µ—Å–µ–ª—ã–º –∏ –∑–∞–±–∞–≤–Ω—ã–º.",
            "poetic": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –∏ –æ–±—Ä–∞–∑–∞–º–∏."
        }
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        selected_style = style_instructions.get(style.lower(), style_instructions["casual"])
        # –í—ã–∑–æ–≤ OpenAI API
        completion = client.chat.completions.create(
            messages=[{'role': 'system', 'content': f'–í—ã SMM-—ç–∫—Å–ø–µ—Ä—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç—ã –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –î–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 900 —Å–∏–º–≤–æ–ª–æ–≤. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏. {selected_style} –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –∑–∞–¥–∞–≤–∞–π.'},
                      {'role': 'user', 'content': prompt}
            ],
            model=model,
            max_tokens=max_tokens,
            temperature=0.5
        )
        # –í–æ–∑–≤—Ä–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        return completion.choices[0].message.content.strip()
    except AuthenticationError as auth_error:
        raise Exception(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OpenAI: {auth_error}")
    except APIError as api_error:
        raise Exception(f"–û—à–∏–±–∫–∞ API OpenAI: {api_error}")
    except RateLimitError as rate_limit_error:
        raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI: {rate_limit_error}")
    except OpenAIError as ex:
        raise Exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ OpenAI: {ex}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")


@async_log_exception
async def generate_image_prompt(post_text: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    try:
        completion = client.chat.completions.create(
            model=conf.openai.gpt_model,
            messages=[
                {'role': 'system', 'content': """–í—ã SMM-—ç–∫—Å–ø–µ—Ä—Ç –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä. 
                –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (10-20 —Å–ª–æ–≤), –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫ —Ç–µ–∫—Å—Ç—É. 
                –í–∫–ª—é—á–∏—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:
                - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ/–ª–∞–Ω–¥—à–∞—Ñ—Ç
                - –õ—é–¥–∏/–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
                - –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
                - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏. –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""},
                {'role': 'user', 'content': f'–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text}'}
            ],
            max_tokens=200,
            temperature=0.3
        )
        image_prompt = completion.choices[0].message.content.strip()
        logger.info(f"[OpenAI] –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_prompt}")
        return image_prompt
    except Exception as e:
        logger.error(f"[OpenAI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


@async_log_exception
async def get_current_model() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å OpenAI –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return conf.openai.gpt_model
